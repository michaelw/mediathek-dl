#! /bin/bash
# needs bash for arrays
set -e

# requires: bash, tatort-dl, rtmpdump, curl, libxml-xpath-perl, md5sum
# optional: youtube-upload

nlast=1

cleanup() {
    [ -n "$feed" ] && {
        rm -f "$feed"
    }
}


while getopts c:d:p:t:l:h flag; do
    case "$flag" in
      c) nlast=$OPTARG
         ;;
      d) outdir=$OPTARG
         ;;
      p) prune=$OPTARG
         ;;
      t) ytopts=( $OPTARG )
         command -v youtube-upload >/dev/null 2>&1 || {
             echo "youtube-upload not found in PATH ($PATH)"
             exit 1
         }
         ;;
      l) ytplaylist="$OPTARG"
         ;;
      ?|h) cat >&2 <<EOF
Prefetches contents of ARD Mediathek RSS feeds
Usage:
  $0 [-c <COUNT>] [-p <COUNT>] [-d <DIR>] <RSS URL>

Options:
  -c <COUNT>    download COUNT latest shows from RSS feed
  -p <COUNT>    delete all but the COUNT latest files (warning: dangerous)
  -d <DIR>      Download files into DIR (instead of current working directory)
  -t <ARGS>     Upload using youtube-upload; ARGS are passed to youtube-upload
  -l <URI>      YouTube playlist URI, passed to youtube-upload; example:
                http://gdata.youtube.com/feeds/api/playlists/<ID>, where ID is
                taken from a playlist URL:
                http://www.youtube.com/playlist?list=<ID>

  <RSS URL>     URL to Mediathek RSS feeds, e.g.,
                http://www.ardmediathek.de/export/rss/id=1458
EOF
         exit 1
         ;;
    esac
done
shift $(( OPTIND - 1 ));

[ $# -ne 1 ] && {
    echo >&2 "$0: wrong number of arguments"
}

rssurl="$1"; shift;

trap "cleanup" EXIT
feed="`mktemp --tmpdir feed-XXXXXX.xml`"

[ -n "$outdir" ] && {
    mkdir -p "$outdir"
    cd "$outdir"
}

curl "$rssurl" -o "$feed"

IFS=$'\n'
# l="$(sed -ne "s#.*<link>\(.*\)</link>.*#\1#p" "$feed" | head -$nlast)"
l="$(xpath -q -e "(//item/link)[position() <= $nlast]/text()" "$feed" )"
urls=( $l )
l="$(xpath -q -e "(//item/title)[position() <= $nlast]/text()" "$feed" )"
titles=( $l )
l="$(xpath -q -e "(//item/pubDate)[position() <= $nlast]/text()" "$feed" )"
dates=( $l )

echo >&2 "Downloading $urls"
for i in $(seq 1 ${#urls[@]}); do
    id=$(date --date="${dates[$i-1]}" -I)
    outfile="${titles[$i-1]}_$id.flv"
    origmd5=$(md5sum "$outfile" || true)
    tatort-dl -q "${urls[$i-1]}" "$outfile" || true
    newmd5=$(md5sum "$outfile" || true)
    if [ -n "$ytopts" ] && ! [ "$origmd5" = "$newmd5" ]; then
        title=${titles[$i-1]}
        url=$(youtube-upload -t "$title" ${ytopts[@]} "$outfile")
        if [ $? = 0 ] && [ -n "$ytplaylist" ]; then
            # fortunately youtube-upload tolerates irrelevant options
            youtube-upload ${ytopts[@]} --add-to-playlist="$ytplaylist" "$url"
        else
            echo >&2 "upload failed: $outfile"
        fi
    fi
done

[ -n "$prune" ] && {
    [ -z "$outdir" ] && {
        echo >&2 "cowardly refusing to prune without specifying directory (-d)"
        exit 1
    }
    # do not delete what we downloaded just now
    if [ ${#urls[@]} -le "$prune" ]; then
        ls -tQ | awk "NR > $prune" | xargs -r rm
    fi
}
